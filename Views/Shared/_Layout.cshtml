
@inject IConfiguration Configuration
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Mvc.Controllers
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@{
    string? currentController = (ViewContext.ActionDescriptor as ControllerActionDescriptor)?.ControllerName;
    string? currentAction = (ViewContext.ActionDescriptor as ControllerActionDescriptor)?.ActionName;
    Func<string, string, string> isActive = (c, a) =>
        (string.Equals(currentController, c, StringComparison.OrdinalIgnoreCase)
         && string.Equals(currentAction, a, StringComparison.OrdinalIgnoreCase))
        ? "active" : "";

    var appTitle = "Identity_JWT_Project";
}

<!DOCTYPE html>
<html lang="en" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @appTitle</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Identity_JWT_Project.styles.css" asp-append-version="true" />

    <style>
        :root {
        --brand-start: #0d6efd;
        --brand-end: #6610f2;
        }

        header .navbar {
        background: linear-gradient(135deg, var(--brand-start), var(--brand-end));
        }

        header .navbar .navbar-brand, header .navbar .nav-link, header .navbar .dropdown-item {
        color: #fff;
        }

        header .navbar .dropdown-menu {
        background: rgba(0,0,0,.85);
        }

        header .navbar .dropdown-item:hover {
        background: rgba(255,255,255,.08);
        }

        .navbar .nav-link.active, .navbar .dropdown-toggle.show {
        text-decoration: underline;
        text-underline-offset: 4px;
        }

        .offcanvas {
        width: 280px;
        }

        main {
        padding-block: 1.25rem 2.5rem;
        }

        html, body {
        height: 100%;
        }

        body {
        display: flex;
        flex-direction: column;
        }

        main[role="main"] {
        flex: 1 0 auto;
        }

        footer {
        flex-shrink: 0;
        }

        .theme-toggle {
        border: 1px solid rgba(255,255,255,.35);
        color: #fff;
        }

        .theme-toggle:hover {
        background: rgba(255,255,255,.1);
        }

        [data-bs-theme="dark"] header .navbar .dropdown-menu {
        background: rgba(255,255,255,.08);
        }

        [data-bs-theme="dark"] header .navbar .dropdown-item {
        color: #eaeaea;
        }

        .navbar a:focus {
        outline: 2px dashed rgba(255,255,255,.7);
        outline-offset: 2px;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark shadow-sm">
            <div class="container-fluid">
                <a class="navbar-brand fw-semibold d-flex align-items-center gap-2" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-shield-lock-fill"></i> @appTitle
                </a>

                <!-- Desktop: theme + auth -->
                <div class="d-none d-lg-flex align-items-center gap-2">
                    <button id="themeToggle" class="btn btn-sm theme-toggle" type="button" title="Toggle theme">
                        <i class="bi bi-moon-stars" id="themeIcon"></i>
                    </button>
                    <partial name="_LoginPartial" />
                </div>

                <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#mainNav" aria-controls="mainNav" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <!-- Offcanvas (mobile) -->
                <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="mainNav" aria-labelledby="mainNavLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="mainNavLabel"><i class="bi bi-menu-button-wide me-2"></i> Menu</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    @if (SignInManager.IsSignedIn(User) )
                    {
                        <div class="offcanvas-body d-flex flex-column gap-3">

                            <ul class="navbar-nav">
                                <li class="nav-item">
                                    <a class="nav-link @isActive("Home","Index")" asp-controller="Home" asp-action="Index">
                                        <i class="bi bi-house-door"></i> Home
                                    </a>
                                </li>
                                <!-- Roles dropdown -->
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle @((currentController=="Home" && (currentAction=="Create" || currentAction=="UsersWithRoles")) ? "active" : "")"
                                    href="#" id="rolesMenu" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-people-gear"></i> Roles
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="rolesMenu">
                                        <li>
                                            <a class="dropdown-item @isActive("Home","Index")" asp-controller="Home" asp-action="Index">
                                                <i class="bi bi-card-checklist me-2"></i> All Roles
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item @isActive("Home","Create")" asp-controller="Home" asp-action="Create">
                                                <i class="bi bi-plus-square me-2"></i> Create Role
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item @isActive("Home","UsersWithRoles")" asp-controller="Home" asp-action="UsersWithRoles">
                                                <i class="bi bi-people me-2"></i> Users & Roles
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider" /></li>

                                        <!-- QR generator -->
                                        <li class="px-3 py-2">
                                            <button class="btn btn-outline-light w-100" id="btnGenQr">
                                                Generate Viewer QR (@(Configuration["Jwt:Minutes"] ?? "15"))m
                                            </button>
                                        </li>
                                        <li class="px-3 py-2">
                                            <div id="qrWrap" class="mt-2 d-none">
                                                <img id="qrImg" class="border rounded p-2" width="240" height="240" alt="Viewer QR" />
                                                <div class="small text-muted mt-2">Scan to open read-only viewer (expires soon).</div>
                                            </div>
                                        </li>
                                    </ul>
                                </li>
                            </ul>

                            <!-- Mobile: theme + auth -->
                            <div class="d-lg-none mt-2">
                                <button id="themeToggleMobile" class="btn btn-outline-light w-100 mb-3" type="button" title="Toggle theme">
                                    <i class="bi bi-moon-stars me-2" id="themeIconMobile"></i> Toggle Theme
                                </button>
                                <partial name="_LoginPartial" />
                            </div>

                        </div>
                    }
                </div>

                    
                </div>
        </nav>
    </header>

    <div class="container">
        <main role="main">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top py-3 bg-body-tertiary">
        <div class="container d-flex justify-content-between align-items-center small">
            <span>&copy; @DateTime.UtcNow.Year - @appTitle</span>
            <span>Develop By : <a href="https://github.com/MotayamTarada/MotayamTarada">Motayam Tarada</a></span>
            <a class="link-secondary" asp-area="" asp-controller="Home" asp-action="Privacy">
                <i class="bi bi-shield-lock me-1"></i> Privacy
            </a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- Theme persistence -->
    <script>
        (function () {
            const root = document.documentElement;
            const stored = localStorage.getItem('theme');
            if (stored === 'dark' || stored === 'light') {
                root.setAttribute('data-bs-theme', stored);
            }
            const iconMap = { dark: 'bi-sun', light: 'bi-moon-stars' };
            function updateIcons(theme) {
                const desktopIcon = document.getElementById('themeIcon');
                const mobileIcon = document.getElementById('themeIconMobile');
                if (desktopIcon) desktopIcon.className = 'bi ' + (theme === 'dark' ? iconMap.dark : iconMap.light);
                if (mobileIcon) mobileIcon.className = 'bi ' + (theme === 'dark' ? iconMap.dark : iconMap.light);
            }
            updateIcons(root.getAttribute('data-bs-theme') || 'light');
            function toggleTheme() {
                const current = root.getAttribute('data-bs-theme') || 'light';
                const next = current === 'light' ? 'dark' : 'light';
                root.setAttribute('data-bs-theme', next);
                localStorage.setItem('theme', next);
                updateIcons(next);
            }
            document.getElementById('themeToggle')?.addEventListener('click', toggleTheme);
            document.getElementById('themeToggleMobile')?.addEventListener('click', toggleTheme);
        })();
    </script>

    <!-- QR generator -->
    <script>
        document.getElementById('btnGenQr')?.addEventListener('click', async () => {
            const r = await fetch('/viewer/qr', { method:'GET' });
            if (!r.ok) { alert('Failed to generate QR'); return; }
            const blob = await r.blob();
            document.getElementById('qrImg').src = URL.createObjectURL(blob);
            document.getElementById('qrWrap').classList.remove('d-none');
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
